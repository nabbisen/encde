name: Deploy
on:
  release:
    types: [created]

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  release:
    name: Deploy Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          # - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-22.04
          #   tag: linux-aarch64-gnu
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            tag: linux-x86_64-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
            tag: osx-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            tag: windows-x86_64-msvc
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      run: bash .github/workflows/scripts/install-rust.sh stable ${{ matrix.target }}
    # Linux only starts here
    - name: Install Tauri dependencies (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
    # - name: Install Tauri toolchain (aarch64-unknown-linux-gnu only)
    #   if: matrix.target == 'aarch64-unknown-linux-gnu'
    #   run: |
    #     rustup target add aarch64-unknown-linux-gnu
    #     rustup default aarch64-unknown-linux-gnu
    #     sudo apt-get install -y libc6-dev gcc-aarch64-linux-gnu libc6-dev-arm64-cross binfmt-support binutils-aarch64-linux-gnu
    # Linux only ends here
    - name: Prepare Tauri
      run: |
        cargo install tauri-cli
        cargo install trunk # only when rust used in frontend
        rustup target add wasm32-unknown-unknown
    - name: Build asset
      run: bash .github/workflows/scripts/make-release-asset.sh ${{ matrix.os }} ${{ matrix.target }} ${{ matrix.tag }}
    - name: Update release with new asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload $APP_TAG $APP_ASSET
  # pages:
  #   name: GitHub Pages
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@master
  #   - name: Install Rust (rustup)
  #     run: rustup update stable --no-self-update && rustup default stable
  #   - name: Build book
  #     run: cargo run -- build guide
  #   - name: Deploy to GitHub
  #     env:
  #       GITHUB_DEPLOY_KEY: ${{ secrets.GITHUB_DEPLOY_KEY }}
  #     run: |
  #       touch guide/book/.nojekyll
  #       curl -LsSf https://raw.githubusercontent.com/rust-lang/simpleinfra/master/setup-deploy-keys/src/deploy.rs | rustc - -o /tmp/deploy
  #       cd guide/book
  #       /tmp/deploy

#  publish:
#    name: Publish to crates.io
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: Install Rust (rustup)
#        run: rustup update stable --no-self-update && rustup default stable
#      - name: Publish
#        env:
#          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
#        run: cargo publish --no-verify
